package com.merchant;

import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.tomcat.jdbc.pool.DataSource;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.client.RestTemplate;

//@EnableDiscoveryClient
@SpringBootApplication
@MapperScan("com.merchant.dao")
// 扫描mapper
@EnableTransactionManagement
// 启注解事务管理，等同于xml配置方式的 <tx:annotation-driven />
public class MerchantServiceApplication {

	public static void main(String[] args) {
		new SpringApplicationBuilder(MerchantServiceApplication.class).web(true).run(args);
	}

	//数据源
	@Bean
	@ConfigurationProperties(prefix = "jdbc")
	public DataSource dataSource() {
		return new org.apache.tomcat.jdbc.pool.DataSource();
	}

	@Bean
	public SqlSessionFactory sqlSessionFactoryBean() throws Exception {
		SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
		sqlSessionFactoryBean.setDataSource(dataSource());
		PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
		sqlSessionFactoryBean.setMapperLocations(resolver.getResources("classpath:/mybatis/mapping/*.xml")); // "**"代表多个文件夹下
		return sqlSessionFactoryBean.getObject();
	}

	//事物管理
	@Bean
	public PlatformTransactionManager transactionManager() {
		return new DataSourceTransactionManager(dataSource());
	}

	
	//RestTemplate
	@Bean 
	public RestTemplate  restTemplateBean () {
		RestTemplate restTemplate = new RestTemplate();
		ClientHttpRequestFactory factory = restTemplate.getRequestFactory();
		  if (factory instanceof SimpleClientHttpRequestFactory) {
			   ((SimpleClientHttpRequestFactory) factory).setConnectTimeout(10*1000  );
			   ((SimpleClientHttpRequestFactory) factory).setReadTimeout(10*1000  );
			  } else if (restTemplate.getRequestFactory() instanceof HttpComponentsClientHttpRequestFactory) {
			   
			   ((HttpComponentsClientHttpRequestFactory) factory).setReadTimeout(10 * 1000);
			   ((HttpComponentsClientHttpRequestFactory) factory).setConnectTimeout(10 * 1000);
			  }
		 
		return restTemplate;
	}
	
	

}
